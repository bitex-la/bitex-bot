# File to write log to. The log is rotated every 10.240.000 bytes, 10 oldest logs are kept around.
# If you want to log to stdout you can set 'file' to nil or remove the key.
# How much information to show in the log valid values are: [:debug, :info, :error].
log file: 'bitex_bot.log', level: :info

# Seconds to keep an order alive before recalculating the price and replacing it.
# Given the way in which the robot tries to find the safest price to place an order, if the time to live is too long the price is
#  not going to be competitive. About 20 seconds is a good number here.
time_to_live 20

# Use sandbox environments instead of live environments only available for Bitex and Itbit.
sandbox false

# Which market to use for taking (we're always makers on Bitex), vali values are: [:itbit, :bitstamp, :bitfinex, :kraken].
taker :bitstamp

# Settings for buying on Bitex and selling on Bitstamp.
#
# amount_to_spend_per_order:
#   Dollars to spend on each initial Bitex Bid.
#   Should at least be 10.0 which is the current minimum order size on Bitex.
#   if it's too large then you're taking a higher risk if whatever happens and you cannot re sell it afterwards.
#   Also, higher amounts result in your Bitex Bid price not being competitive.
#   A number between 10.0 and 1000.0 is reccommended.
#
# profit:
#   Your profit when buying on bitex, 0.5 means 0.5%.
#   After calculating the price at which bitcoins can be sold on Bitstamp, the robot deduces your profit from that price, and
#   places a Bid on Bitex paying a lower price.
buying amount_to_spend_per_order: 10.0, profit: 0.5

# Settings for selling on Bitex and buying on Bitstamp.
#
# quantity_to_sell_per_order:
#   Quantity to sell on each initial Bitex Ask.
#   It should be at least 10 USD worth of BTC at current market prices, a bit more just to be safe.
#   Otherwise Bitex will reject your orders for being too small.
#   If it's too small then the robot is pointless, and if it's too large you're taking a higher risk if whatever happens and you
#   cannot re buy afterwards.
#   Also, higher amounts result in your Bitex Bid price not being competitive.
#   A number between 0.05 and 2.0 is recommended.
#
# profit:
#   Your profit when selling on Bitex, 0.5 means 0.5%.
#   After calculating the price at which bitcoins can be bought on taker, the robot deduces your profit from that price and
#   places an Ask on Bitex charging a higher price.
selling quantity_to_sell_per_order: 0.1, profit: 0.5

# This is your bitex api key, it's passed in to the Bitex gem: https://github.com/bitex-la/bitex-ruby.
# By default the :orderbook key, will be :btc_usd, but, you can select any option of this white list: [:btc_usd, :btc_ars].
bitex api_key: 'your_bitex_api_key_which_should_be_kept_safe', orderbook: :btc_usd

# Fx rate for bitex orderbook
fx_rate '1.0'.to_d

# These are passed in to the Bitstamp gem: https://github.com/kojnapp/bitstamp.
bitstamp api_key: 'YOUR_API_KEY', secret: 'YOUR_API_SECRET', client_id: 'YOUR_BITSTAMP_USERNAME'

# These are passed in to the Itbit gem: https://github.com/bitex-la/itbit.
itbit client_key: 'the-client-key', secret: 'the-secret', user_id: 'the-user-id', default_wallet_id: 'wallet-000'

# These are passed in to the Bitfinex gem: https://github.com/bitfinexcom/bitfinex-api-rb.
bitfinex api_key: 'your_api_key', api_secret: 'your_api_secret'

# These are passed in to the Kraken gem: https://github.com/shideneyu/kraken_client.
kraken api_key: 'your_api_key', api_secret: 'your_api_secret'

# Settings for the ActiveRecord Database to use.
# Sqlite is just fine. Check this link for more options: http://apidock.com/rails/ActiveRecord/Base/establish_connection/class.
database adapter: :sqlite3, database: 'bitex_bot.db'

# The robot sends you emails whenever a problem occurs.
# If you do not want to receive emails just remove this 'mailer' key and everything under it.
# It uses https://github.com/mikel/mail under the hood, so method is any valid delivery_method for the mail gem.
# Options is the options hash passed in to delivery_method.
mailer from: 'robot@example.com',
  to: 'you@example.com',
  delivery_method: :smtp,
  options: {
    address: 'your_smtp_server_address.com',
    port: 587,
    authentication: 'plain',
    enable_starttls_auto: true,
    user_name: 'your_user_name',
    password: 'your_smtp_password'
  }
